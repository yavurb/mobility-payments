// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getByEmail = `-- name: GetByEmail :one
select id, public_id, type, user_name, email, balance, password, created_at, updated_at from users where email = $1
`

type GetByEmailRow struct {
	ID        int64
	PublicID  string
	Type      UserType
	UserName  string
	Email     string
	Balance   int64
	Password  string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) GetByEmail(ctx context.Context, email string) (GetByEmailRow, error) {
	row := q.db.QueryRow(ctx, getByEmail, email)
	var i GetByEmailRow
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Type,
		&i.UserName,
		&i.Email,
		&i.Balance,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getByPublicID = `-- name: GetByPublicID :one
select id, public_id, type, user_name, email, balance, password, created_at, updated_at from users where public_id = $1
`

type GetByPublicIDRow struct {
	ID        int64
	PublicID  string
	Type      UserType
	UserName  string
	Email     string
	Balance   int64
	Password  string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) GetByPublicID(ctx context.Context, publicID string) (GetByPublicIDRow, error) {
	row := q.db.QueryRow(ctx, getByPublicID, publicID)
	var i GetByPublicIDRow
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Type,
		&i.UserName,
		&i.Email,
		&i.Balance,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const save = `-- name: Save :one
insert into users (public_id, type, user_name, email, password, balance) values ($1, $2, $3, $4, $5, $6) returning id, created_at, updated_at
`

type SaveParams struct {
	PublicID string
	Type     UserType
	UserName string
	Email    string
	Password string
	Balance  int64
}

type SaveRow struct {
	ID        int64
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) Save(ctx context.Context, arg SaveParams) (SaveRow, error) {
	row := q.db.QueryRow(ctx, save,
		arg.PublicID,
		arg.Type,
		arg.UserName,
		arg.Email,
		arg.Password,
		arg.Balance,
	)
	var i SaveRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
