// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package postgres

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type TransactionPaymentMethod string

const (
	TransactionPaymentMethodCreditCard   TransactionPaymentMethod = "credit_card"
	TransactionPaymentMethodDebitCard    TransactionPaymentMethod = "debit_card"
	TransactionPaymentMethodBankTransfer TransactionPaymentMethod = "bank_transfer"
)

func (e *TransactionPaymentMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionPaymentMethod(s)
	case string:
		*e = TransactionPaymentMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionPaymentMethod: %T", src)
	}
	return nil
}

type NullTransactionPaymentMethod struct {
	TransactionPaymentMethod TransactionPaymentMethod
	Valid                    bool // Valid is true if TransactionPaymentMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionPaymentMethod) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionPaymentMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionPaymentMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionPaymentMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionPaymentMethod), nil
}

type TransactionStatus string

const (
	TransactionStatusRequiresConfirmation TransactionStatus = "requires_confirmation"
	TransactionStatusSucceeded            TransactionStatus = "succeeded"
	TransactionStatusDeclined             TransactionStatus = "declined"
)

func (e *TransactionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionStatus(s)
	case string:
		*e = TransactionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionStatus: %T", src)
	}
	return nil
}

type NullTransactionStatus struct {
	TransactionStatus TransactionStatus
	Valid             bool // Valid is true if TransactionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionStatus), nil
}

type UserType string

const (
	UserTypeCustomer UserType = "customer"
	UserTypeMerchant UserType = "merchant"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType
	Valid    bool // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

type Transaction struct {
	ID          int64
	PublicID    string
	SenderID    int64
	ReceiverID  int64
	Status      TransactionStatus
	Currency    string
	Amount      int64
	Method      TransactionPaymentMethod
	Description string
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type User struct {
	ID        int64
	PublicID  string
	UserName  string
	Email     string
	Type      UserType
	Password  string
	Balance   int64
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}
